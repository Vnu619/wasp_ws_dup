// Generated by gencpp from file wasp_joy/wall.msg
// DO NOT EDIT!


#ifndef WASP_JOY_MESSAGE_WALL_H
#define WASP_JOY_MESSAGE_WALL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wasp_joy
{
template <class ContainerAllocator>
struct wall_
{
  typedef wall_<ContainerAllocator> Type;

  wall_()
    : init(0.0)
    , move(0.0)  {
    }
  wall_(const ContainerAllocator& _alloc)
    : init(0.0)
    , move(0.0)  {
  (void)_alloc;
    }



   typedef double _init_type;
  _init_type init;

   typedef double _move_type;
  _move_type move;





  typedef boost::shared_ptr< ::wasp_joy::wall_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wasp_joy::wall_<ContainerAllocator> const> ConstPtr;

}; // struct wall_

typedef ::wasp_joy::wall_<std::allocator<void> > wall;

typedef boost::shared_ptr< ::wasp_joy::wall > wallPtr;
typedef boost::shared_ptr< ::wasp_joy::wall const> wallConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wasp_joy::wall_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wasp_joy::wall_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wasp_joy::wall_<ContainerAllocator1> & lhs, const ::wasp_joy::wall_<ContainerAllocator2> & rhs)
{
  return lhs.init == rhs.init &&
    lhs.move == rhs.move;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wasp_joy::wall_<ContainerAllocator1> & lhs, const ::wasp_joy::wall_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wasp_joy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wasp_joy::wall_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wasp_joy::wall_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wasp_joy::wall_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wasp_joy::wall_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wasp_joy::wall_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wasp_joy::wall_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wasp_joy::wall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4d4a2a8340d6604dab35f7221e2246d";
  }

  static const char* value(const ::wasp_joy::wall_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4d4a2a8340d6604ULL;
  static const uint64_t static_value2 = 0xdab35f7221e2246dULL;
};

template<class ContainerAllocator>
struct DataType< ::wasp_joy::wall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wasp_joy/wall";
  }

  static const char* value(const ::wasp_joy::wall_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wasp_joy::wall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 init\n"
"float64 move\n"
;
  }

  static const char* value(const ::wasp_joy::wall_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wasp_joy::wall_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.init);
      stream.next(m.move);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wall_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wasp_joy::wall_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wasp_joy::wall_<ContainerAllocator>& v)
  {
    s << indent << "init: ";
    Printer<double>::stream(s, indent + "  ", v.init);
    s << indent << "move: ";
    Printer<double>::stream(s, indent + "  ", v.move);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WASP_JOY_MESSAGE_WALL_H
