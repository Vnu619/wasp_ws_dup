// Generated by gencpp from file wasp_logistics/LogisticsGoal.msg
// DO NOT EDIT!


#ifndef WASP_LOGISTICS_MESSAGE_LOGISTICSGOAL_H
#define WASP_LOGISTICS_MESSAGE_LOGISTICSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wasp_logistics
{
template <class ContainerAllocator>
struct LogisticsGoal_
{
  typedef LogisticsGoal_<ContainerAllocator> Type;

  LogisticsGoal_()
    : active(false)
    , distance(0.0)
    , liftup(0)
    , liftdown(0)  {
    }
  LogisticsGoal_(const ContainerAllocator& _alloc)
    : active(false)
    , distance(0.0)
    , liftup(0)
    , liftdown(0)  {
  (void)_alloc;
    }



   typedef uint8_t _active_type;
  _active_type active;

   typedef float _distance_type;
  _distance_type distance;

   typedef int32_t _liftup_type;
  _liftup_type liftup;

   typedef int32_t _liftdown_type;
  _liftdown_type liftdown;





  typedef boost::shared_ptr< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct LogisticsGoal_

typedef ::wasp_logistics::LogisticsGoal_<std::allocator<void> > LogisticsGoal;

typedef boost::shared_ptr< ::wasp_logistics::LogisticsGoal > LogisticsGoalPtr;
typedef boost::shared_ptr< ::wasp_logistics::LogisticsGoal const> LogisticsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wasp_logistics::LogisticsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wasp_logistics::LogisticsGoal_<ContainerAllocator1> & lhs, const ::wasp_logistics::LogisticsGoal_<ContainerAllocator2> & rhs)
{
  return lhs.active == rhs.active &&
    lhs.distance == rhs.distance &&
    lhs.liftup == rhs.liftup &&
    lhs.liftdown == rhs.liftdown;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wasp_logistics::LogisticsGoal_<ContainerAllocator1> & lhs, const ::wasp_logistics::LogisticsGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wasp_logistics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb138febd2383e49af85d47988e04ff4";
  }

  static const char* value(const ::wasp_logistics::LogisticsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb138febd2383e49ULL;
  static const uint64_t static_value2 = 0xaf85d47988e04ff4ULL;
};

template<class ContainerAllocator>
struct DataType< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wasp_logistics/LogisticsGoal";
  }

  static const char* value(const ::wasp_logistics::LogisticsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"bool active\n"
"float32 distance\n"
"int32 liftup\n"
"int32 liftdown\n"
"#float32 startpoint_x\n"
"#float32 startpoint_y\n"
"#float32 startpoint_z\n"
"#float32 startpoint_w\n"
"#float32 endpoint_x\n"
"#float32 endpoint_y\n"
"#float32 endpoint_z\n"
"#float32 endpoint_w\n"
;
  }

  static const char* value(const ::wasp_logistics::LogisticsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.active);
      stream.next(m.distance);
      stream.next(m.liftup);
      stream.next(m.liftdown);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LogisticsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wasp_logistics::LogisticsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wasp_logistics::LogisticsGoal_<ContainerAllocator>& v)
  {
    s << indent << "active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "liftup: ";
    Printer<int32_t>::stream(s, indent + "  ", v.liftup);
    s << indent << "liftdown: ";
    Printer<int32_t>::stream(s, indent + "  ", v.liftdown);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WASP_LOGISTICS_MESSAGE_LOGISTICSGOAL_H
