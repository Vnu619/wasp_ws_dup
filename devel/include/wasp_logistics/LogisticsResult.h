// Generated by gencpp from file wasp_logistics/LogisticsResult.msg
// DO NOT EDIT!


#ifndef WASP_LOGISTICS_MESSAGE_LOGISTICSRESULT_H
#define WASP_LOGISTICS_MESSAGE_LOGISTICSRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wasp_logistics
{
template <class ContainerAllocator>
struct LogisticsResult_
{
  typedef LogisticsResult_<ContainerAllocator> Type;

  LogisticsResult_()
    : liftup_(0)
    , liftdown_(0)
    , final(0)  {
    }
  LogisticsResult_(const ContainerAllocator& _alloc)
    : liftup_(0)
    , liftdown_(0)
    , final(0)  {
  (void)_alloc;
    }



   typedef int32_t _liftup__type;
  _liftup__type liftup_;

   typedef int32_t _liftdown__type;
  _liftdown__type liftdown_;

   typedef int32_t _final_type;
  _final_type final;





  typedef boost::shared_ptr< ::wasp_logistics::LogisticsResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wasp_logistics::LogisticsResult_<ContainerAllocator> const> ConstPtr;

}; // struct LogisticsResult_

typedef ::wasp_logistics::LogisticsResult_<std::allocator<void> > LogisticsResult;

typedef boost::shared_ptr< ::wasp_logistics::LogisticsResult > LogisticsResultPtr;
typedef boost::shared_ptr< ::wasp_logistics::LogisticsResult const> LogisticsResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wasp_logistics::LogisticsResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wasp_logistics::LogisticsResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wasp_logistics::LogisticsResult_<ContainerAllocator1> & lhs, const ::wasp_logistics::LogisticsResult_<ContainerAllocator2> & rhs)
{
  return lhs.liftup_ == rhs.liftup_ &&
    lhs.liftdown_ == rhs.liftdown_ &&
    lhs.final == rhs.final;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wasp_logistics::LogisticsResult_<ContainerAllocator1> & lhs, const ::wasp_logistics::LogisticsResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wasp_logistics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wasp_logistics::LogisticsResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wasp_logistics::LogisticsResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wasp_logistics::LogisticsResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wasp_logistics::LogisticsResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wasp_logistics::LogisticsResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wasp_logistics::LogisticsResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wasp_logistics::LogisticsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "609a04ed842c289f52a4ee3c9b0c5e0f";
  }

  static const char* value(const ::wasp_logistics::LogisticsResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x609a04ed842c289fULL;
  static const uint64_t static_value2 = 0x52a4ee3c9b0c5e0fULL;
};

template<class ContainerAllocator>
struct DataType< ::wasp_logistics::LogisticsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wasp_logistics/LogisticsResult";
  }

  static const char* value(const ::wasp_logistics::LogisticsResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wasp_logistics::LogisticsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result definition\n"
"int32 liftup_\n"
"int32 liftdown_\n"
"int32 final\n"
;
  }

  static const char* value(const ::wasp_logistics::LogisticsResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wasp_logistics::LogisticsResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.liftup_);
      stream.next(m.liftdown_);
      stream.next(m.final);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LogisticsResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wasp_logistics::LogisticsResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wasp_logistics::LogisticsResult_<ContainerAllocator>& v)
  {
    s << indent << "liftup_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.liftup_);
    s << indent << "liftdown_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.liftdown_);
    s << indent << "final: ";
    Printer<int32_t>::stream(s, indent + "  ", v.final);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WASP_LOGISTICS_MESSAGE_LOGISTICSRESULT_H
