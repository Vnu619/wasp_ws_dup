// Generated by gencpp from file wasp_logistics/LogisticsFeedback.msg
// DO NOT EDIT!


#ifndef WASP_LOGISTICS_MESSAGE_LOGISTICSFEEDBACK_H
#define WASP_LOGISTICS_MESSAGE_LOGISTICSFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wasp_logistics
{
template <class ContainerAllocator>
struct LogisticsFeedback_
{
  typedef LogisticsFeedback_<ContainerAllocator> Type;

  LogisticsFeedback_()
    : distance(0.0)
    , liftup(0)
    , liftdown(0)  {
    }
  LogisticsFeedback_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , liftup(0)
    , liftdown(0)  {
  (void)_alloc;
    }



   typedef float _distance_type;
  _distance_type distance;

   typedef int32_t _liftup_type;
  _liftup_type liftup;

   typedef int32_t _liftdown_type;
  _liftdown_type liftdown;





  typedef boost::shared_ptr< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct LogisticsFeedback_

typedef ::wasp_logistics::LogisticsFeedback_<std::allocator<void> > LogisticsFeedback;

typedef boost::shared_ptr< ::wasp_logistics::LogisticsFeedback > LogisticsFeedbackPtr;
typedef boost::shared_ptr< ::wasp_logistics::LogisticsFeedback const> LogisticsFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wasp_logistics::LogisticsFeedback_<ContainerAllocator1> & lhs, const ::wasp_logistics::LogisticsFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.liftup == rhs.liftup &&
    lhs.liftdown == rhs.liftdown;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wasp_logistics::LogisticsFeedback_<ContainerAllocator1> & lhs, const ::wasp_logistics::LogisticsFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wasp_logistics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c7dbc18f58ce4ac772abd20f60ad4b9";
  }

  static const char* value(const ::wasp_logistics::LogisticsFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c7dbc18f58ce4acULL;
  static const uint64_t static_value2 = 0x772abd20f60ad4b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wasp_logistics/LogisticsFeedback";
  }

  static const char* value(const ::wasp_logistics::LogisticsFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"float32 distance\n"
"int32 liftup\n"
"int32 liftdown\n"
"\n"
"\n"
;
  }

  static const char* value(const ::wasp_logistics::LogisticsFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.liftup);
      stream.next(m.liftdown);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LogisticsFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wasp_logistics::LogisticsFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wasp_logistics::LogisticsFeedback_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "liftup: ";
    Printer<int32_t>::stream(s, indent + "  ", v.liftup);
    s << indent << "liftdown: ";
    Printer<int32_t>::stream(s, indent + "  ", v.liftdown);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WASP_LOGISTICS_MESSAGE_LOGISTICSFEEDBACK_H
