// Generated by gencpp from file wasp_logistics/TrolleyAlignFeedback.msg
// DO NOT EDIT!


#ifndef WASP_LOGISTICS_MESSAGE_TROLLEYALIGNFEEDBACK_H
#define WASP_LOGISTICS_MESSAGE_TROLLEYALIGNFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wasp_logistics
{
template <class ContainerAllocator>
struct TrolleyAlignFeedback_
{
  typedef TrolleyAlignFeedback_<ContainerAllocator> Type;

  TrolleyAlignFeedback_()
    : align_distance(0.0)  {
    }
  TrolleyAlignFeedback_(const ContainerAllocator& _alloc)
    : align_distance(0.0)  {
  (void)_alloc;
    }



   typedef float _align_distance_type;
  _align_distance_type align_distance;





  typedef boost::shared_ptr< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct TrolleyAlignFeedback_

typedef ::wasp_logistics::TrolleyAlignFeedback_<std::allocator<void> > TrolleyAlignFeedback;

typedef boost::shared_ptr< ::wasp_logistics::TrolleyAlignFeedback > TrolleyAlignFeedbackPtr;
typedef boost::shared_ptr< ::wasp_logistics::TrolleyAlignFeedback const> TrolleyAlignFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator1> & lhs, const ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.align_distance == rhs.align_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator1> & lhs, const ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wasp_logistics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7244dbdfcdb44c8b9d2912950696c78";
  }

  static const char* value(const ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7244dbdfcdb44c8ULL;
  static const uint64_t static_value2 = 0xb9d2912950696c78ULL;
};

template<class ContainerAllocator>
struct DataType< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wasp_logistics/TrolleyAlignFeedback";
  }

  static const char* value(const ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"float32 align_distance\n"
"\n"
"\n"
;
  }

  static const char* value(const ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.align_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrolleyAlignFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wasp_logistics::TrolleyAlignFeedback_<ContainerAllocator>& v)
  {
    s << indent << "align_distance: ";
    Printer<float>::stream(s, indent + "  ", v.align_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WASP_LOGISTICS_MESSAGE_TROLLEYALIGNFEEDBACK_H
